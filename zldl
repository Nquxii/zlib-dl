#! /usr/bin/env python3
import time
import os
import logging
import sys
import argparse
import json

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager

# Default download path -> ./assets/{book}
DL_PATH = os.path.dirname(os.path.realpath(__file__)) + '/assets/'

# Read config file to determine if path is set
with open('config.json', 'r') as f:
    config = json.load(f)
     
    if config['download_path'] != '':
        DL_PATH = config['download_path'] 

# Detects download status & time
def dlwait(path):
    ''' Wait until the file download is completed Will not work if a corrupted downlod is already 
    in the given path. '''
    start_time = time.time()
    dl_wait = True
    
    while dl_wait:
        dl_wait = False
         
        for book in os.listdir(path):
            if book.endswith('.crdownload'):
                dl_wait = True
     
    runtime = "%s" % round(time.time() - start_time, 4)
    return runtime

# Argparse initialization
parser = argparse.ArgumentParser()

parser.add_argument('path', metavar='path', type=str, default=DL_PATH, action='store',
                    nargs='?', help='A path for the download')

parser.add_argument('--s', metavar='search', type=str, action='store',
                    required=True, help='A search query for the download')

parser.add_argument('--n', metavar='quantity', type=int, default=5, 
                    help='Number of search results desired')

parser.add_argument('--p', metavar='pages', type=int, default=1, 
                    help='Number of pages to search in')

args = parser.parse_args()

# Disable unsightly webdriver-manager log messages
os.environ['WDM_LOG_LEVEL'] = '0'
os.environ['WDM_LOG'] = str(logging.NOTSET)
logging.getLogger('WDM').setLevel(logging.NOTSET)

chrome_options = Options()

# Include this to remove GUI and extensions for the sake of simplicity
chrome_options.add_argument("--headless")
chrome_options.add_argument("--disable-extensions")

# Necessary variables
driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=chrome_options)

DL_PATH = args.path
search = args.s
result_count = args.n
page_count = args.p

# Enable downloads in selenium
driver.command_executor._commands["send_command"] = ("POST", '/session/$sessionId/chromium/send_command')

params = {'cmd': 'Page.setDownloadBehavior', 'params': {'behavior': 'allow', 'downloadPath': DL_PATH}}
command_result = driver.execute("send_command", params)

# Initial query for search
start_url = f"https://b-ok.cc/s/{search}"

# Search and begin download
sresults = []

driver.get(start_url)

# every link in '/s/{search}'
book_links = driver.find_elements(By.XPATH, '//a[contains(@href,"/book/")]')

for el in book_links:
    href = str(el.get_attribute('href'))
    sresults.append(href)

if result_count == 0:
    result_count = len(sresults)

for pcount in range(page_count):
    for book in range(result_count):
        driver.get(f'{sresults[book]}?page={pcount+1}')
        title = driver.find_element(By.TAG_NAME, 'h1').text
        
        try:
            # Book information
            info = driver.find_element(By.CLASS_NAME, "bookDetailsBox").text
        except NoSuchElementException:
            info = "Error receiving book details"
        
        # Split data
        info = info.split("\n")
        
        print(f'[{book+1}] {title}\n')
        
        # find properties in info and list it
        for p in info:
            if ":" in p:
                print("\t", p, end=" ")
            else:
                print(p)
         
        print()

book = int(input("\nEnter desired download: "))

if book == 0:
    sys.exit("No download specified. Exiting..")

# Identify selected book (link) and click download button
selected_book = sresults[book - 1]

driver.get(selected_book)

# Obtain title and click 'download' button
title = driver.find_element(By.TAG_NAME, 'h1').text

# Handle ip rate limit and removed links
if 'unavailable' in driver.find_element(By.CLASS_NAME, 'dlButton').text:
    sys.exit(f'ERROR: Unable to download book {selected_book}.\nLink removed by legal owner.')
else:
    driver.find_element(By.CLASS_NAME, "dlButton").click()

if '/dl/' in driver.current_url:
    if 'Daily limit' in driver.find_element(By.TAG_NAME, "h1").text:
        limit_error = driver.find_element(By.CLASS_NAME, "download-limits-error__message").text
        sys.exit(f'\nERROR: {limit_error}')

print(f"Downloading {title}.. ")
dl_time = dlwait(DL_PATH)

print(f'Successfully downloaded {title}. ({dl_time} seconds)')
driver.quit()
